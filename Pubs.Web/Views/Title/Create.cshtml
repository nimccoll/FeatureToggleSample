<!--
//===============================================================================
// Microsoft Premier Support for Developers
// FeatureToggle Sample
//===============================================================================
// Copyright © Microsoft Corporation.  All rights reserved.
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY
// OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
// LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE.
//===============================================================================
-->
@model Pubs.Data.Models.Title

<link rel="stylesheet" type="text/css" href="~/Content/themes/base/all.css" />
<link rel="stylesheet" type="text/css" href="~/Content/themes/base/jquery-ui-timepicker-addon.css" />
<style>
    .ui-autocomplete {
        z-index: 5000;
    }

    #authorModal .modal-body {
        max-height: 800px;
    }

    #authorModal .modal-dialog {
        width: 900px;
    }
</style>

@{
    ViewBag.Title = "New Title";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>New Title</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.TitleID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TitleID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TitleID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BookTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.BookTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.BookTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Publisher, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Publisher.PublisherID, (SelectList)ViewBag.Publishers, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Publisher.PublisherID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" style="padding-top:0"><button id="btnChooseAuthors" class="btn btn-default" data-toggle="modal" data-target="#authorModal">Author(s)</button></label>
            <div class="col-md-10">
                <input type="text" readonly id="txtAuthors" name="txtAuthors" class="form-control" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Advance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Advance, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Advance, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Royalty, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Royalty, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Royalty, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.YearToDateSales, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.YearToDateSales, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.YearToDateSales, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PublishDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.PublishDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                @Html.ValidationMessageFor(model => model.PublishDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>

    <div class="modal fade" id="authorModal">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Authors</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-3">
                            <input type="radio" name="rdoSearchType" value="name" checked /> Search by Name<br />
                            <input type="radio" name="rdoSearchType" value="id" /> Search by ID
                        </div>
                        <div class="col-md-4">
                            <input id="txtSearchLastName" type="text" class="type-ahead form-control" />
                        </div>
                        <div class="col-md-1"><button id="btnAddAuthor" class="btn btn-default">Add</button></div>
                        <div class="col-md-4" style="height:300px">
                            <ul id="lstAuthors" class="list-group"></ul>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    <script src="~/Scripts/jquery-ui-1.11.2.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-ui-timepicker-addon.js" type="text/javascript"></script>
    <script type="text/javascript">
        $(document).ready(function () {

            $('.type-ahead').autocomplete({
                source: function (request, response) {
                    var searchType = $("input[name='rdoSearchType']:checked").val();
                    var ajaxUrl = '/author/listbylastname/?lastName=';

                    if (searchType == 'id') {
                        ajaxUrl = '/author/listbyid/?authorID=';
                    }

                    $.ajax({
                        url: ajaxUrl + request.term,
                        type: 'GET',
                        cache: false,
                        dataType: 'json',
                        success: function (json) {
                            response(json);
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            console.log('error', textStatus, errorThrown);
                        }
                    });
                },
                minLength: 2,
                select: function (event, ui) {
                    $('.type-ahead').val(ui.item.label);
                    return false;
                }
            });

            $('#btnAddAuthor').on('click', function (event) {
                event.preventDefault(); // prevent button click from submitting the form

                var author = $('#txtSearchLastName').val();
                if (author != '')
                {
                    var authorIDStart = author.indexOf('(');
                    var authorIDEnd = author.indexOf(')');
                    if (authorIDStart > 0
                        && authorIDEnd > 0)
                    {
                        var authorID = author.substring(authorIDStart + 1, authorIDEnd);
                        var authorCheckbox = '<input type="checkbox" id="author-' + authorID + '" name="author-' + authorID + '" checked /> ' + author;
                        $("#lstAuthors").append('<li class="list-group-item">' + authorCheckbox + '</li>');
                        $('#txtSearchLastName').val('');
                    }
                }
            });

            $('#authorModal').on('hide.bs.modal', function () {
                $('#txtAuthors').val('');
                $('#lstAuthors li').each(function (i, li) {
                    var authorCheckbox = $(li).contents()[0];
                    var author = $(li).contents()[1];
                    if ($(authorCheckbox).is(':checked'))
                    {
                        if ($('#txtAuthors').val() != '')
                        {
                            $('#txtAuthors').val($('#txtAuthors').val() + ",");
                        }
                        $('#txtAuthors').val($('#txtAuthors').val() + $(author).text());
                    }
                    else
                    {
                        $(li).remove();
                    }
                });
            });

            $('.datepicker').datetimepicker({
                timeFormat: "hh:mm TT"
            });
        });
    </script>
}
